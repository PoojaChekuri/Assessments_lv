# -*- coding: utf-8 -*-
"""lvadsusr146_Chekuri_Pooja_Sree_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxSbSQEKMh7Q_uK3aAqjRPUfUtXQQaa-
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/mushroom.csv')
df=pd.DataFrame(data)

df.head()

df.info()

df.describe()

"""Handling Null values"""

df.isnull().sum()

df['stem-color']=df['stem-color'].fillna(df['stem-color'].mode()[0])

df.isnull().sum()

df.duplicated().sum()

df=df.drop_duplicates()

df.duplicated().sum()

"""Univariate Analysis"""

for i in df.columns:
  plt.figure(figsize=(10,5))
  plt.hist(df[i])
  plt.title(f'Histogram of {i}')
  plt.show()

"""Handling Outliers"""

for i in df.columns:
  plt.figure(figsize=(10,5))
  plt.boxplot(df[i])
  plt.title(f'Boxplot of {i}')
  plt.show()

for i in df.columns:
  q1=df[i].quantile(0.25)
  q3=df[i].quantile(0.75)
  iqr=q3-q1
  l=q1-1.5*iqr
  u=q3+1.5*iqr
  df[i]=df[i].clip(lower=l,upper=u)
  sns.boxplot(df[i])
  plt.show()

"""Bivariate Analysis"""

correlation=df.corr()

sns.heatmap(correlation,annot=True)

"""Feature Selection"""

x=df.drop(['class'],axis=1)
y=df['class']

"""Label Encoding not required"""

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=42)

scaler=StandardScaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)

"""logistic Regression"""

log=LogisticRegression()
log.fit(x_train_scaled,y_train)
y_predict=log.predict(x_test_scaled)

"""Evaluation"""

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix,classification_report
acc=accuracy_score(y_predict,y_test)
pre=precision_score(y_predict,y_test)
re=recall_score(y_predict,y_test)
f1=f1_score(y_predict,y_test)
conf=confusion_matrix(y_predict,y_test)
classi=classification_report(y_predict,y_test)
print('Confusion Matrix:')
print(conf)
print('Classification Report:')
print(classi)
print('Accuracy:')
print(acc)
print('Precision:')
print(pre)
print('Recall:')
print(re)
print('F1 score:')
print(f1)

"""Random Forest Classification"""

rand=RandomForestClassifier(n_estimators=100)
rand.fit(x_train_scaled,y_train)
y_predict=rand.predict(x_test_scaled)

"""Evaluation"""

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix,classification_report
acc=accuracy_score(y_predict,y_test)
pre=precision_score(y_predict,y_test)
re=recall_score(y_predict,y_test)
f1=f1_score(y_predict,y_test)
conf=confusion_matrix(y_predict,y_test)
classi=classification_report(y_predict,y_test)
print('Confusion Matrix:')
print(conf)
print('Classification Report:')
print(classi)
print('Accuracy:')
print(acc)
print('Precision:')
print(pre)
print('Recall:')
print(re)
print('F1 score:')
print(f1)

"""RandomForest Classifier Gives Better Accuracy of 99% compared to Logistic Regression Model"""