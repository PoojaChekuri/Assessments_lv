# -*- coding: utf-8 -*-
"""lvadsusr146_Chekuri_Pooja_Sree_BPA_Lab1_FA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3wk5FcJTt00dqIehys1xzs832k7tZsT

Lab 1 Regression

Importing requiresd libraries and loading the data
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

data=pd.read_csv('/content/Fare prediction.csv')
df=pd.DataFrame(data)

df.head()

df.info()

df.describe()

df.shape

"""Handling misiing values"""

df.isnull().sum()

"""NO null values

Duplicates
"""

df.duplicated().sum()

"""Univariate Analysis"""

'''for i in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(df[i])
  plt.title(f'Hisogram of {i}')
  plt.xlabel(i)
  plt.show()'''

for i in df.select_dtypes(include='object').columns:
  plt.figure(figsize=(10,5))
  df[i].value_counts().nlargest(5).plot(kind='bar')
  plt.title(f'Bar chart of {i}')
  plt.xlabel(i)
  plt.ylabel('Count')
  plt.show()

"""Handling Outliers"""

for i in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(df[i])
  plt.title(f'boxplot of {i}')
  plt.xlabel(i)
  plt.show()

for i in df.select_dtypes(include=['int64','float64']).columns:
  q1=df[i].quantile(0.25)
  q3=df[i].quantile(0.75)
  iqr=q1-q3
  l=q1-1.5*iqr
  u=q3+1.5*iqr
  df[i]=df[i].clip(lower=l,upper=u)
  sns.boxplot(df[i])
  plt.show()

df.shape

df.columns

"""Bivariate Analysis"""

numerical=df.select_dtypes(include=['int64','float64']).columns
correlation_matrix=df[numerical].corr()
print(correlation_matrix)

sns.heatmap(correlation_matrix,annot=True,fmt='.2f',cmap='coolwarm')

features=['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','pickup_datetime','passenger_count']

"""Encoding"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for i in df.select_dtypes(include='object').columns:
  df[i]=le.fit_transform(df[i])

df.head()

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
x=df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','pickup_datetime','passenger_count']]
y=df.fare_amount
lin_reg=LinearRegression()
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
scaler=MinMaxScaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)
lin_reg.fit(x_train_scaled,y_train)
y_predict= lin_reg.predict(x_test_scaled)

print(y_predict)

from sklearn.metrics import r2_score, mean_squared_error
mse=mean_squared_error(y_test,y_predict)
print('mean squared error:',mse)
rmse=mean_squared_error(y_test,y_predict,squared=False)
print('root mean squared error:',rmse)
r2=r2_score(y_test,y_predict)
print('R^2:',r2)

