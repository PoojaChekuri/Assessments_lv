# -*- coding: utf-8 -*-
"""lvadsusr146_Chekuri_Pooja_Sree_BPA_IA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LrvRXbVicl8tKBtKU_naBTtwE23daRdd

Load Data
"""

import pandas as pd
import seaborn as sns
data=pd.read_csv('/content/winequality-red.csv')
df=pd.DataFrame(data)

df.head()

df.info()

df.describe()

"""Finding missing values and filling with mean"""

df.isnull().sum()

for i in df.select_dtypes(include=['int64','float64']):
  df[i]=df[i].fillna(df[i].mean())

df.isnull().sum()

"""Finding and removing duplicates"""

df.duplicated().sum()

df.drop_duplicates()

"""Indentifying and removing outliers"""

import matplotlib.pyplot as plt
import seaborn as sns

for i in df.select_dtypes(include=['int64','float64']):
  plt.figure(figsize=(10,5))
  sns.boxplot(df[i])
  plt.title(f'Boxplot of {i}')
  plt.xlabel(i)
  plt.show()

for i in df.select_dtypes(include=['int64','float64']):
  q1=df[i].quantile(0.25)
  q3=df[i].quantile(0.75)
  iqr=q3-q1
  l=q1-1.5*iqr
  u=q3+1.5*iqr
  df[i]=df[i].clip(lower=l,upper=u)
  sns.boxplot(df[i])
  plt.show()

df.shape

"""Data Transformation Consider the below given since the values have float"""

for i in range(df.shape[0]):
  if df['quality'][i]>3 and df['quality'][i]<7:
    df['quality'][i]=0
  elif df['quality'][i]>=7 and df['quality'][i]<8:
    df['quality'][i]=1

df.head()

df.quality.value_counts()

"""SCALING AND SPLITTING"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import MinMaxScaler
X=df.drop('quality',axis=1)
y=df.quality

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

scaler=MinMaxScaler()
xtrain_scaled=scaler.fit_transform(X_train)
xtest_scaled=scaler.transform(X_test)

knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(xtrain_scaled,y_train)
y_predict=knn.predict(xtest_scaled)

from sklearn.metrics import classification_report,confusion_matrix
conf=confusion_matrix(y_test,y_predict)
classi=classification_report(y_test,y_predict)
print("Confusion_matrix:")
print(conf)
print("classification report:")
print(classi)